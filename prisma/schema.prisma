generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id               String         @id @default(cuid())
  name             String
  description      String
  image            String
  price            Float
  video            String?
  category         CATEGORY
  duration         Int?
  learningObj      String[]
  targetAud        String[]
  slug             String         @unique
  isFeatured       Boolean        @default(false)
  isOnline         Boolean        @default(false)
  isTrending       Boolean        @default(false)
  curriculum       String?
  metaTitle        String?
  metaDesc         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  published        Boolean        @default(false)
  instructorId     String
  Instructor       Instructor     @relation(fields: [instructorId], references: [id])
  relatedCoursesId String
  RelatedCourses   RelatedCourses @relation(fields: [relatedCoursesId], references: [id])
}

model RelatedCourses {
  id        String   @id @default(cuid())
  course    Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Hero {
  id        String   @id @default(cuid())
  title     String
  subtitle  String
  button    String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Instructor {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  bio       String?
  rating    Float?
  reviews   String?
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Course    Course[]
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  image     String
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Partners {
  id        String   @id @default(cuid())
  name      String[]
  image     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime
}

enum CATEGORY {
  DATA_SCIENCE
  CODING
  CLOUD_SECURITY
  GRAPHICS
  MANAGEMENT
  NETWORKING
}

model Post {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  content   String
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  published Boolean   @default(false)
  comments  Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  name      String
  email     String
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  published Boolean   @default(false)
  postId    String
  Post      Post      @relation(fields: [postId], references: [id])
  commentId String?
  Comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
}
